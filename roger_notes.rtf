###########################################################################################################################################

CHECK CHECKSUM: (on MAC)

• shasum < /goinfre/jraty/Debian-Roger.vdi

###########################################################################################################################################

INSTALLATION:

###########################################################################################################################################

# Do the partitioning

	• A disk size of 8 GB.
	• Have at least one 4.2 GB partition.
___________________________________________________________________________________________________________________________________________

# Make sure it's up to date as well as the whole packages installed

	• sudo apt-get update -y && sudo apt-get upgrade --with-new-pkgs -y
	OR (sudo apt-get update -y && sudo apt-get upgrade -y)

###########################################################################################################################################

NETWORK AND SECURITY:

###########################################################################################################################################

!! Make sure you have at least one (non-root) user with matching pubkey


# You must create a non-root user to connect to the machine and work.

	• sudo adduser orava
	• ssh orava@<host.ip>
___________________________________________________________________________________________________________________________________________

# Use sudo, with this user, to be able to perform operation requiring special rights.

	• sudo adduser orava sudo
	OR (sudo visudo > orava	ALL=(ALL:ALL) NOPASSWD: ALL)
	(test it with i.e. "cat /var/log/syslog")
___________________________________________________________________________________________________________________________________________

# We don’t want you to use the DHCP service of your machine.
  You’ve got to configure it to have a static IP and a Netmask in \30.

	• ip a / ip route (check ip address, netmask and gateway. != dynamic is static)
	• sudo vi /etc/network/interfaces
		• change dhcp > static
		• address 10.11.XXX.XXX (ping to see it's free, first 2 fields must match)
		• netmask 255.255.255.252 (netmask /30)
		• gateway 10.11.254.254 (from 'ip route | grep default)
	• ifdown enp0s3 && ifup enp0s3 (to restart network)
	(apt-get install net-tools)
	• sudo netstat -tulpn OR sudo ss -tulpn to check if the dhclient is still listening
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	TEST IT:
	• sudo vi /etc/network/interfaces
		-> address 10.11.0.1 (change the IP)
        -> netmask 255.255.255.0 (change to netmask /24)
	• ifdown enp0s3 && ifup enp0s3 (to restart network)
	• ssh janne@10.11.0.1 -p 50001 !!
___________________________________________________________________________________________________________________________________________

# You have to change the default port of the SSH service by the one of your choice.
  SSH access HAS TO be done with publickeys. SSH root access SHOULD NOT be allowed
  directly, but with a user who can be root.

	(sudo ss -tulpn OR sudo netstat -tulpn (to check which port sshd is currently))
	• sudo vi /etc/ssh/sshd_config
		• change "Port 22" (uncomment AND choose a port between 49152–65535)
	(sudo apt-get install ufw)
	• sudo ufw allow 50001/tcp (update the firewall rules)
	• sudo service sshd restart
	• connect again via new port: ssh <username>@<host.ip> -p <port_nbr>
	(sudo ss -tulpn OR sudo netstat -tulpn (to check which port sshd is currently))
	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	• sudo vi /etc/ssh/sshd_config
		-> uncomment "PermitRootLogin" and set its value to "no"
		-> uncomment "PubkeyAuthentication" and set its value to "yes"
		-> uncomment "PasswordAuthentication" and set its value to "no"
	• sudo service sshd restart
	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	• ssh orava@10.11.66.6 -p 50001 (doesn't work...)
		-> orava@10.11.66.6: Permission denied (publickey).
	• go back to "sudo vi /etc/ssh/sshd_config" (on guest machine)
	• set "PasswordAuthentication" back to "yes"
	• sudo service sshd restart
	• ssh-copy-id orava@10.11.66.6 -p 50001 (type orava's password)
		-> Number of key(s) added:        1
	• go back to "sudo vi /etc/ssh/sshd_config" (on guest machine)
	• set "PasswordAuthentication" back to "no"
	• sudo service sshd restart
	• ssh orava@10.11.66.6 -p 50001 (works!!!)
	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	OR
	(login as a non-root user with sudo rights)
	• sudo adduser orava
	• sudo adduser orava sudo
	• sudo mkdir -p /home/orava/.ssh/
	• sudo scp /home/janne/.ssh/authorized_keys /home/orava/.ssh/authorized_keys
	• sudo chown orava /home/orava/.ssh/authorized_keys
	• logout
	• ssh orava@10.11.66.6 -p 50001
___________________________________________________________________________________________________________________________________________

# You have to set the rules of your firewall on your server only with the services
  used outside the VM.

	• sudo ufw status verbose
	• sudo ufw enable (if inactive)
	• sudo ufw allow http (80/tcp)
	• sudo ufw allow http (443/tcp)
//	• sudo ufw deny 22/tcp (deny access via default ssh port)
	• sudo service sshd restart
	  (sudo iptables --list) - the default firewall management utility
	  (sudo netstat -tapnl) - to see which port's are listening
	  (sudo lsof -i :50001)
___________________________________________________________________________________________________________________________________________

# You have to set a DOS (Denial Of Service Attack) protection on your open ports of your VM.

	• sudo netstat -tulpn | grep LISTEN (to see which ports are open/listened)
		OR (sudo lsof -i -P -n | grep LISTEN)
		OR (sudo nmap -sTU -O 10.11.66.6)
	• sudo apt-get install fail2ban
	• sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local (make a local copy of 'local.conf')
	• sudo vi /etc/fail2ban/jail.local
		-> [sshd]
			enabled = true (add this line)
			port = 50001 (specify your custom ssh port)
			
		-> [http-get-dos] (add this whole thing under '# HTTP servers' section)
			enabled = true
			port = http,https
			filter = http-get-dos
			logpath = /var/log/apache*/access.log
			maxretry = 100
			findtime = 60
			bantime = 200
			action = iptables-multiport[name=ReqLimit, port="http,https", protocol=tcp]
	• sudo vi /etc/fail2ban/filter.d/http-get-dos.conf (create a new file)
		-> # Fail2Ban configuration file
			#
			[Definition]

			# Option: failregex
			# Note: This regex will match any GET entry in your logs, so basically all valid and not valid entries are a match.
			# You should set up in the jail.conf file, the maxretry and findtime carefully in order to avoid false positives.

			failregex = ^<HOST> -.*\"(GET|POST).*

			# Option: ignoreregex
			# Notes.: regex to ignore. If this regex matches, the line is ignored.
			# Values: TEXT
			#
			ignoreregex =
	• sudo service fail2ban restart (restart to make changes effective)
	• sudo service fail2ban status (check it running again)
	• sudo fail2ban-client status (check both jails are active)
	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	(in the MAC TERMINAL)

	[HTTP attack]

	• install SlowLoris: git clone https://github.com/gkbrk/slowloris.git slowloris
	• cd ~/slowloris
	• python slowloris.py 10.11.66.6
		-> sudo fail2ban-client status http-get-dos (check http-get-dos jail)
				Status for the jail: http-get-dos
				|- Filter
				|  |- Currently failed: 0
				|  |- Total failed:     450
				|  `- File list:        /var/log/apache2/access.log
				`- Actions
					|- Currently banned: 1
					|- Total banned:     2
					`- Banned IP list:   10.11.6.13
		-> sudo iptables -S (you can see banned IP here)
				-A f2b-HTTP -s 10.11.6.13/32 -j REJECT --reject-with icmp-port-unreachable
		-> sudo cat /var/log/fail2ban.log | grep 'Ban\|Unban' (check banned connetions)
				2020-09-25 09:03:41,135 fail2ban.actions        [9311]: NOTICE  [http-get-dos] Ban 10.11.6.13

	[SSH attack]

	• try to connect 6 times via ssh
		-> c1r6p13% ssh paviaani@10.11.66.6 -p 50001
		   paviaani@10.11.66.6: Permission denied (publickey).
		   c1r6p13% ssh paviaani@10.11.66.6 -p 50001
		   paviaani@10.11.66.6: Permission denied (publickey).
		   c1r6p13% ssh paviaani@10.11.66.6 -p 50001
		   paviaani@10.11.66.6: Permission denied (publickey).
		   c1r6p13% ssh paviaani@10.11.66.6 -p 50001
		   paviaani@10.11.66.6: Permission denied (publickey).
		   c1r6p13% ssh paviaani@10.11.66.6 -p 50001
		   paviaani@10.11.66.6: Permission denied (publickey).
		   c1r6p13% ssh paviaani@10.11.66.6 -p 50001
		   ssh: connect to host 10.11.66.6 port 50001: Connection refused
	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	(in the DEBIAN TERMINAL, because you're now banned)

	-> sudo fail2ban-client status sshd (check sshd jail)
			Status for the jail: sshd
					|- Filter
					|  |- Currently failed: 0
					|  |- Total failed:     5
					|  `- File list:        /var/log/auth.log
					`- Actions
						|- Currently banned: 1
						|- Total banned:     1
						`- Banned IP list:   10.11.6.13
	-> sudo iptables -S (you can see banned IP here)
			-A f2b-sshd -s 10.11.6.13/32 -j REJECT --reject-with icmp-port-unreachable
	-> sudo cat /var/log/fail2ban.log | grep 'Ban\|Unban' (check banned connetions)
				2020-09-25 09:08:38,925 fail2ban.actions        [9311]: NOTICE  [sshd] Ban 10.11.6.13

	(sudo fail2ban-client set JAIL_NAME unbanip IP_ADDR - to unban an ip if needed)
___________________________________________________________________________________________________________________________________________

# You have to set a protection against scans on your VM’s open ports.

• sudo apt-get update && sudo apt-get install portsentry
• sudo vi /etc/default/portsentry
	-> TCP_MODE="atcp" ("a" in both, advanced mode)
	-> UDP_MODE="audp"
• sudo vi /etc/portsentry/portsentry.conf
	-> BLOCK_UDP="1" (set these two "1" to activate UDP/TCP scans)
	-> BLOCK_TCP="1"
	-> KILL_ROUTE="/sbin/iptables -I INPUT -s $TARGET$ -j DROP"
	   (search for KILL_ROUTE and make sure ONLY this line is uncommented)
	   (sudo cat /etc/portsentry/portsentry.conf | grep KILL_ROUTE | grep -v "#" to verify)
• sudo service portsentry restart
• sudo service portsentry status

(a) "sudo nmap -sTU -O 10.11.66.6" should not list anything anymore
(b) Not able to do telnet to any port for eg. "telnet 10.11.66.6 PORT"
(c) sudo cat /var/log/syslog
	-> Sep 28 05:09:50 debian portsentry[6086]: attackalert: Host 10.11.66.6 has been blocked via
	   dropped route using command: "/sbin/iptables -I INPUT -s 10.11.66.6 -j DROP"
___________________________________________________________________________________________________________________________________________

# Stop the services you don’t need for this project.

• sudo systemctl disable <service>
	-> sudo systemctl disable systemd-timesyncd

REBOOT AND CHECK

• systemctl list-unit-files --type service --state enabled
	UNIT FILE              STATE  
	apache2.service        enabled
	apparmor.service       enabled
	autovt@.service        enabled
	...

	13 unit files listed.

• sudo service --status-all
 	[ - ]  apache-htcacheclean
 	[ + ]  apache2
 	[ + ]  apparmor
 	[ - ]  console-setup.sh
 	[ + ]  cron
	...

• systemctl --type=service (to list all loaded services on your system)
___________________________________________________________________________________________________________________________________________

# Create a script that updates all the sources of package, then your packages and which logs
  the whole in a file named /var/log/update_script.log. Create a scheduled task for this script
  once a week at 4AM and every time the machine reboots.

• sudo touch /var/log/update_script.log && sudo chown janne /var/log/update_script.log
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
• sudo touch update_script.sh
• sudo chmod 744 update_script.sh
• Script:

	#!/bin/bash

	printf "\n" | sudo tee -a /var/log/update_script.log
	date | sudo tee -a /var/log/update_script.log
	sudo apt-get update -y | sudo tee -a /var/log/update_script.log
	sudo apt-get upgrade --with-new-pkgs -y | sudo tee -a /var/log/update_script.log
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
• sudo vi /etc/crontab
• add the two lines below:

		# /etc/crontab: system-wide crontab
		# Unlike any other crontab you don't have to run the `crontab'
		# command to install the new version when you edit this file
		# and files in /etc/cron.d. These files also have username fields,
		# that none of the other crontabs do.

		SHELL=/bin/sh
		PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

		# Example of job definition:
		# .---------------- minute (0 - 59)
		# |  .------------- hour (0 - 23)
		# |  |  .---------- day of month (1 - 31)
		# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
		# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
		# |  |  |  |  |
		# *  *  *  *  * user-name command to be executed
		17 *    * * *   root    cd / && run-parts --report /etc/cron.hourly
		25 6    * * *   root    test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.daily )
		47 6    * * 7   root    test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.weekly )
		52 6    1 * *   root    test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.monthly )
	-> 00 4    * * 0   root    /home/janne/update_script.sh
	-> @reboot         root    /home/janne/update_script.sh
		#

• sudo reboot
• mail
	"/var/mail/janne": 1 message 1 new
	>N   1 Cron Daemon        Tue Sep 29 05:00  24/871   Cron <janne@debian> /home/janne/update_script.sh 

	Saved 1 message in /home/janne/mbox
___________________________________________________________________________________________________________________________________________

# Make a script to monitor changes of the /etc/crontab file and sends an email to root if it has been modified.
# Create a scheduled script task every day at midnight.

• sudo touch monitor_crontab.sh
• sudo chmod 744 monitor_crontab.sh
• Script:

	#!/bin/bash

	FILE_TO_MONITOR="/etc/crontab"
	COMPARE_TO_FILE="/home/janne/last.crontab.check"
	CHECKSUM=$(sudo md5sum $FILE_TO_MONITOR)
	if [ ! -f $COMPARE_TO_FILE ]
	then
			echo "$CHECKSUM" > $COMPARE_TO_FILE
			exit 0;
	fi;
			echo "$CHECKSUM"
			cat $COMPARE_TO_FILE
	if [ "$CHECKSUM" != "$(cat $COMPARE_TO_FILE)" ];
			then
			echo "$CHECKSUM" > $COMPARE_TO_FILE
			echo "$FILE_TO_MONITOR has been modified ! '*_*" |  mail -s "$FILE_TO_MONITOR modified !" root
	fi;

• add another user (for re-directing the mail to root)
• sudo vi /etc/aliases
	-> # /etc/aliases
	   mailer-daemon: postmaster
	   postmaster: root
	   nobody: root
	   hostmaster: root
	   usenet: root
	   news: root
	   webmaster: root
	   www: root
	   ftp: root
	   abuse: root
	   noc: root
	   security: root
	   -> root: keke (change root : janne TO root : <new_user>)

• sudo rm -f /var/spool/mail/root (remove the file in order to be able to create the softlink)
• sudo ln -s /var/spool/mail/keke /var/spool/mail/root (softlink redirects)
• sudo vi /etc/crontab
	-> 00 0    * * *   root    /home/janne/monitor_crontab.sh (add this line)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
TO TEST IT:
• sudo vi /etc/crontab (and edit the file)
• bash monitor_crontab.sh
• sudo mail -u root
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ALTERNATIVE VERSION:

janne@debian:~$ cat monitor_crontab.sh 
	#!/bin/bash

	FILE_TO_MONITOR=/etc/crontab
	COMPARE_TO_FILE=/home/janne/last.crontab.check
	if [ -f $COMPARE_TO_FILE ]
	then  
		find $FILE_TO_MONITOR -type f -newer $COMPARE_TO_FILE | while read tabfile
		do
		echo "/etc/crontab has been changed" | mail -s "Crontab changed" root
		done
	fi
	touch $COMPARE_TO_FILE
___________________________________________________________________________________________________________________________________________

# You have to set a web server who should BE available on the VM’s IP or an host (init.login.com for exemple).
# About the packages of your web server, you can choose between Nginx and Apache. You have to set a self-signed SSL on all of your services.
#
# You have to set a web "application" from those choices:
# 	• login page.
# 	• display site.
# 	• wonderful website that blow our minds.
#
# web-app COULD be written with any language you want



• CREATE A WEB PAGE:
	
	• sudo vi /var/www/html/index.html
		-> start with this, and edit as you please
			<!DOCTYPE html>
			<html>
			<body>

			<h1>My First Heading</h1>

			<p>My first paragraph.</p>

			</body>
			</html>

	• my page:
			<!DOCTYPE html>
			<html>
			<body>

			<style type="text/css">
			html { 
			background: url(https://spacenews.com/wp-content/uploads/2018/05/24359364107_152b0152ff_k.jpg) no-repeat center center fixed; 
			-webkit-background-size: cover;
			-moz-background-size: cover;
			-o-background-size: cover;
			background-size: cover;
			}
			</style>

			<h1 style="color:white">Tired of Roger-Skyline? You've come to the right place...</h1>

			<p style="color:white">Don't know what to do? Press here:</p>
					<button type="button" onclick="alert('Press the button below, it will make you smile :D') ">Instructions</button>

			<div class="bgimg w3-display-container w3-animate-opacity w3-text-white">
			<div class="w3-display-middle">
			<p style="color:white">Ready? Press here:</p>
			<h1 class="w3-jumbo w3-animate-top"Ready? Press here:></h1>
			<p><button class="w3-center center transparent_btn" onclick="play1()">For laughs</button></p>
			<div id="youtube-frame"></div>
			</div>
			</body>

			<script>
			function play1() { 
				var frame = document.getElementById("youtube-frame");
				frame.innerHTML += "<iframe width='560' height='315' src='https://www.youtube.com/embed/gbVv94Tl8EI' frameborder='0' allow='accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture' allowfullscreen></iframe>";
			}
			</script>

			</html>

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

• SSL CERTIFICATE:

https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-apache-in-debian-9

• Step 1 — Creating the SSL Certificate
	We can create a self-signed key and certificate pair with OpenSSL in a single command:
	-> sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt
	Fill out the prompts appropriately. The most important line is the one that requests the Common Name (e.g. server FQDN or YOUR name). You need to enter the domain name associated with your server or, more likely, your server’s public IP address.	

• Step 2 — Configuring Apache to Use SSL
	We have created our key and certificate files under the /etc/ssl directory. Now we just need to modify our Apache configuration to take advantage of these.

	We will make a few adjustments to our configuration:

	We will create a configuration snippet to specify strong default SSL settings.
	We will modify the included SSL Apache Virtual Host file to point to our generated SSL certificates.
	(Recommended) We will modify the unencrypted Virtual Host file to automatically redirect requests to the encrypted Virtual Host.
	When we are finished, we should have a secure SSL configuration.

	1. Creating an Apache Configuration Snippet with Strong Encryption Settings

	-> sudo nano /etc/apache2/conf-available/ssl-params.conf
		paste this inside the file:
			SSLCipherSuite EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH
			SSLProtocol All -SSLv2 -SSLv3 -TLSv1 -TLSv1.1
			SSLHonorCipherOrder On
			# Disable preloading HSTS for now.  You can use the commented out header line that includes
			# the "preload" directive if you understand the implications.
			# Header always set Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"
			Header always set X-Frame-Options DENY
			Header always set X-Content-Type-Options nosniff
			# Requires Apache >= 2.4
			SSLCompression off
			SSLUseStapling on
			SSLStaplingCache "shmcb:logs/stapling-cache(150000)"
			# Requires Apache >= 2.4.11
			SSLSessionTickets Off	

	2. Modifying the Default Apache SSL Virtual Host File

	Before we go any further, let’s back up the original SSL Virtual Host file:
		-> sudo cp /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-available/default-ssl.conf.bak

	Now, open the SSL Virtual Host file to make adjustments:
		-> sudo nano /etc/apache2/sites-available/default-ssl.conf
		Make these changes:

				<IfModule mod_ssl.c>
				<VirtualHost _default_:443>
		->				ServerAdmin (your_email@example.com)
		->				(ServerName server_domain_or_IP)

						DocumentRoot /var/www/html

						ErrorLog ${APACHE_LOG_DIR}/error.log
						CustomLog ${APACHE_LOG_DIR}/access.log combined

						SSLEngine on

		->				SSLCertificateFile      /etc/ssl/certs/(apache-selfsigned.crt)
		->				SSLCertificateKeyFile /etc/ssl/private/(apache-selfsigned.key)

						<FilesMatch "\.(cgi|shtml|phtml|php)$">
										SSLOptions +StdEnvVars
						</FilesMatch>
						<Directory /usr/lib/cgi-bin>
										SSLOptions +StdEnvVars
						</Directory>

				</VirtualHost>
		</IfModule>

	3. (Recommended) Modifying the HTTP Host File to Redirect to HTTPS

	As it stands now, the server will provide both unencrypted HTTP and encrypted HTTPS traffic. For better security, it is recommended in most cases to redirect HTTP to HTTPS automatically. If you do not want or need this functionality, you can safely skip this section.
	-> sudo nano /etc/apache2/sites-available/000-default.conf

	Inside, within the VirtualHost configuration blocks, add a Redirect directive, pointing all traffic to the SSL version of the site:
		<VirtualHost *:80>
			. . .

			Redirect "/" "https://your_domain_or_IP/"

			. . .
		</VirtualHost>

• Step 3 — Adjusting the Firewall

	-> sudo ufw app list (to see the available profiles)
	-> sudo ufw allow 'WWW Full' (to additionally let in HTTPS traffic)

• Step 4 — Enabling the Changes in Apache

	Now that we’ve made our changes and adjusted our firewall, we can enable the SSL and headers modules in Apache, enable our SSL-ready Virtual Host, and then restart Apache to put these changes into effect.
		-> sudo a2enmod ssl (enable these two modes)
		-> sudo a2enmod headers
		-> sudo a2ensite default-ssl (enable your SSL Virtual Host)
		-> sudo a2enconf ssl-params (enable your ssl-params.conf file, to read in the values you’ve set)
		-> sudo apache2ctl configtest (you should get: Syntax OK)*
			*if error: (sudo vi /etc/apache2/apache2.conf)
						-> insert line: ServerName localhost

	sudo service apache2 restart
	(sudo service apache2 status)
	(sudo reboot)

	*sudo nano /etc/hosts.deny (in debian)
		-> #comment or delete line ALL: 192.168.100.37 : DENY

• Step 5 — Testing Encryption

Open your web browser and type https:// followed by your server’s domain name or IP into the address bar:
 -> https://server_domain_or_IP

* When receiving a warning "Your connection is not private"
	-> Click ADVANCED and then the link provided to proceed to your host anyways
		*if the link's not there type “thisisunsafe” directly in chrome on the same page

• Step 6 — Changing to a Permanent Redirect

	-> sudo nano /etc/apache2/sites-available/000-default.conf
		-> add the word "permanent" here:
			Redirect permanent "/" "https://your_domain_or_IP/"
	
	sudo apache2ctl configtest (Syntax OK?)
	sudo systemctl restart apache2
	sudo status restart apache2

Conclusion
You have configured your Apache server to use strong encryption for client connections. This will allow you serve requests securely, and will prevent outside parties from reading your traffic.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

IN CASE YOU GET BANNED:

-> sudo vi /etc/portsentry/portsentry.ignore.static
	-> add your MAC's IP/netmask to ignore list
	-> sudo service portsentry restart (to apply the changes)

-> sudo nano /etc/hosts.deny (in debian)
	-> #comment or delete line ALL: 192.168.100.37 : DENY

###########################################################################################################################################

USEFUL COMMANDS:

# su !! (run previous command as sudo)

# scp -P 50001 <source> janne@10.11.66.6:<destination>

# sudo killall -KILL -u <username> (or pkill)
# sudo deluser --remove-home <username>

# ls /etc/init.d (to check services)

# sudo /etc/init.d/SERVICE_NAME start/restart/stop

# cat /etc/passwd (to see users)

# sudo reboot (restart system)

###########################################################################################################################################

TROUBLESHOOTING:

# -bash: sudo: command not found
	• apt-get install sudo (su -)

# bash: netstat: command not found
	• apt-get install net-tools (su -)

# sudo: killall: command not found
	• apt-get install psmisc (su -)

